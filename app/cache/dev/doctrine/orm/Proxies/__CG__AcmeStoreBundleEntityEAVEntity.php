<?php

namespace Proxies\__CG__\Acme\StoreBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class EAVEntity extends \Acme\StoreBundle\Entity\EAVEntity implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getEntityId()
    {
        $this->__load();
        return parent::getEntityId();
    }

    public function setEntityTypeId($entityTypeId)
    {
        $this->__load();
        return parent::setEntityTypeId($entityTypeId);
    }

    public function getEntityTypeId()
    {
        $this->__load();
        return parent::getEntityTypeId();
    }

    public function setDatetime($datetime)
    {
        $this->__load();
        return parent::setDatetime($datetime);
    }

    public function getDatetime()
    {
        $this->__load();
        return parent::getDatetime();
    }

    public function setTvStation($tvStation)
    {
        $this->__load();
        return parent::setTvStation($tvStation);
    }

    public function getTvStation()
    {
        $this->__load();
        return parent::getTvStation();
    }

    public function addAttribute(\Acme\StoreBundle\Entity\EAVAttributeValue $attributes)
    {
        $this->__load();
        return parent::addAttribute($attributes);
    }

    public function removeAttribute(\Acme\StoreBundle\Entity\EAVAttributeValue $attributes)
    {
        $this->__load();
        return parent::removeAttribute($attributes);
    }

    public function getAttributes()
    {
        $this->__load();
        return parent::getAttributes();
    }

    public function setTv(\Acme\StoreBundle\Entity\TVStation $tv = NULL)
    {
        $this->__load();
        return parent::setTv($tv);
    }

    public function getTv()
    {
        $this->__load();
        return parent::getTv();
    }

    public function setEntityType(\Acme\StoreBundle\Entity\MetaEAVEntityType $entityType = NULL)
    {
        $this->__load();
        return parent::setEntityType($entityType);
    }

    public function getEntityType()
    {
        $this->__load();
        return parent::getEntityType();
    }

    public function setEntityId($entityId)
    {
        $this->__load();
        return parent::setEntityId($entityId);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'EntityId', 'EntityTypeId', 'Datetime', 'TvStation', 'attributes', 'tv', 'entityType');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}