<?php

namespace Proxies\__CG__\Acme\StoreBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class TVStation extends \Acme\StoreBundle\Entity\TVStation implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setTvID($tvID)
    {
        $this->__load();
        return parent::setTvID($tvID);
    }

    public function getTvID()
    {
        $this->__load();
        return parent::getTvID();
    }

    public function setTvName($tvName)
    {
        $this->__load();
        return parent::setTvName($tvName);
    }

    public function getTvName()
    {
        $this->__load();
        return parent::getTvName();
    }

    public function setTvCountry($tvCountry)
    {
        $this->__load();
        return parent::setTvCountry($tvCountry);
    }

    public function getTvCountry()
    {
        $this->__load();
        return parent::getTvCountry();
    }

    public function addEntitie(\Acme\StoreBundle\Entity\EAVEntity $entities)
    {
        $this->__load();
        return parent::addEntitie($entities);
    }

    public function removeEntitie(\Acme\StoreBundle\Entity\EAVEntity $entities)
    {
        $this->__load();
        return parent::removeEntitie($entities);
    }

    public function getEntities()
    {
        $this->__load();
        return parent::getEntities();
    }

    public function addScript(\Acme\StoreBundle\Entity\Script $scripts)
    {
        $this->__load();
        return parent::addScript($scripts);
    }

    public function removeScript(\Acme\StoreBundle\Entity\Script $scripts)
    {
        $this->__load();
        return parent::removeScript($scripts);
    }

    public function getScripts()
    {
        $this->__load();
        return parent::getScripts();
    }

    public function addAttribute(\Acme\StoreBundle\Entity\EAVTv $attributes)
    {
        $this->__load();
        return parent::addAttribute($attributes);
    }

    public function removeAttribute(\Acme\StoreBundle\Entity\EAVTv $attributes)
    {
        $this->__load();
        return parent::removeAttribute($attributes);
    }

    public function getAttributes()
    {
        $this->__load();
        return parent::getAttributes();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'TvID', 'TvName', 'TvCountry', 'entities', 'scripts', 'attributes');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}